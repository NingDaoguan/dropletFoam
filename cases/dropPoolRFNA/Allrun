#!/usr/bin/python

import os
import sys

sys.path.append('../../../foamTools/python')
import pyOpenFOAM

# The inputs for this case builder are
#    chemkin/chem.inp   -   Reaction information and species list
#    chemkin/therm.dat  -   Thermodynamic database for species
#    chemkin/properties.db  -  Transport property database for species
#



# Read number of processors from command line (1 by default)
np = pyOpenFOAM.read_inputs(sys.argv)
print "Running with %d processors" % np

# Convert the chemkin files to Foam format
# pyOpenFOAM.run('chemkinToFoam',args='chemkin/chem.inp chemkin/therm.dat constant/reactions constant/thermo');

# Read species list from 'constant/reactions'
#species = pyOpenFOAM.read_species()

# Make 0 directory for this species list
#pyOpenFOAM.make_zero_dir(species, default='N2')

# Generate the transportProperties dict
#pyOpenFOAM.make_transport_properties(species)

# Make the *.foam file for ParaView
pyOpenFOAM.touch_foam_files('hypergol')

os.system('cp -r 0.org 0')

# Generate the initial mesh
print "Generating blockMesh"
pyOpenFOAM.run('blockMesh')

if np > 1:
    # For parallel runs, decompose the problem
    print "Decomposing problem"
    pyOpenFOAM.set_decompose_par3D(np,"simple",1) #aspect ratio = 1 H/W
    pyOpenFOAM.set_balance_par(np)
    pyOpenFOAM.run('decomposePar',args='-cellDist')


n_adapts = pyOpenFOAM.max_refinement_levels();
print "Doing %d adapt iterations" % n_adapts
    
for i in range(0,n_adapts):
    print "Pre-Refinement loop", i
    pyOpenFOAM.run('VOFSetFields',np)
    pyOpenFOAM.run('initDynamicMesh',np)


print "Setting final field values"
pyOpenFOAM.run('VOFSetFields',np)



# Run the problem
print "Running the problem"
#pyOpenFOAM.run('reactingInterFoam',np,hide=False)
os.system('foamJob -parallel -screen reactingInterFoam')


#print "Finished!"


