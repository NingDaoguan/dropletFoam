#!/usr/bin/python

import os
import sys

toolPath = '../../../foamTools/python'
sys.path.append(toolPath)

import pyOpenFOAM


# Read number of processors from command line (1 by default)
np = pyOpenFOAM.read_inputs(sys.argv)
print "Running with %d processors" % np

# Convert the chemkin files to Foam format
# pyOpenFOAM.run('chemkinToFoam',args='chemkin/chem.inp chemkin/therm.dat constant/reactions constant/thermo');

# Read species list from 'constant/reactions'
species = pyOpenFOAM.read_species()

# Add all gas species to "subSpecies" list in the "Vapor" phase
pyOpenFOAM.add_species_to_thermo_dict(species)

# Write the thermo file based on the species list
pyOpenFOAM.write_thermo(species,toolPath)

# Make the *.foam file for ParaView
pyOpenFOAM.touch_foam_files('hypergol')

os.system('cp -r 0.org 0')


# Generate the initial mesh
print "Generating blockMesh"
pyOpenFOAM.run('blockMesh')

if np > 1:
    # For parallel runs, decompose the problem
    print "Decomposing problem"
    pyOpenFOAM.set_decompose_par(np,"simple",1) #aspect ratio = 1 H/W
    pyOpenFOAM.run('decomposePar',args='-cellDist')

n_adapts = pyOpenFOAM.max_refinement_levels()
    
for i in range(0,n_adapts):
    print "Pre-Refinement loop", i
    pyOpenFOAM.run('VOFSetFields',np)
    pyOpenFOAM.run('initDynamicMesh',np)


print "Setting final field values"
pyOpenFOAM.run('VOFSetFields',np)


# Run the problem
print "Running the problem"
if np > 1:
    os.system('foamJob -parallel -screen reactingInterFoam')
else:
    os.system('foamJob -screen reactingInterFoam')

print "Finished!"


