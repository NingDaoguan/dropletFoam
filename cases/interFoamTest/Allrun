#!/usr/bin/python

import os
import sys

sys.path.append('../../python')
import pyOpenFOAM

# The inputs for this case builder are
#    chemkin/chem.inp   -   Reaction information and species list
#    chemkin/therm.dat  -   Thermodynamic database for species
#    chemkin/properties.db  -  Transport property database for species
#



# Read number of processors from command line (1 by default)
np = pyOpenFOAM.read_inputs(sys.argv)
print "Running with %d processors" % np

# Convert the chemkin files to Foam format
#pyOpenFOAM.run('chemkinToFoam',args='chemkin/chem.inp chemkin/therm.dat constant/reactions constant/thermo');

# Read species list from 'constant/reactions'
#species = pyOpenFOAM.read_species()

# Make 0 directory for this species list
#pyOpenFOAM.make_zero_dir(species, default='N2')

# Generate the transportProperties dict
#pyOpenFOAM.make_transport_properties(species)

# Make the *.foam file for ParaView
pyOpenFOAM.touch_foam_files('plic')

os.system('cp -r 0.org 0')

# Generate the initial mesh
print "Generating blockMesh"
pyOpenFOAM.run('blockMesh')

"""
for i in range(0,2):
    print "Pre-Refinement loop", i
    pyOpenFOAM.run('VOFSetFields')
    pyOpenFOAM.run('initDynamicMesh')
    lasttime = pyOpenFOAM.get_sorted_time_folders(False).pop()
    os.system('rm '+lasttime+'/alphaVapor*')
    os.system('cp 0.org/* '+lasttime+'/')
"""

pyOpenFOAM.run('VOFSetFields')

os.system('mv 0/alphaLiquid.gz 0/alpha1.gz');
os.system('rm 0/alphaVapor.gz');
os.system('rm 0/N2');
os.system('rm 0/T');
os.system('rm 0/Ydefault');

if np > 1:
    # For parallel runs, decompose the problem
    print "Decomposing problem"
    pyOpenFOAM.set_decompose_par(np,"simple",1) #aspect ratio = 1 H/W
    pyOpenFOAM.run('decomposePar',args='-cellDist')


# Run the problem
if np > 1:
    # Redistribute the mesh - NOT CURRENTLY WORKING
    #  this needs ptscotch while decomposePar needs scotch
    #print "Redistributing the mesh"
    #pyOpenFOAM.set_decompose_par(np,"ptscotch")
    #pyOpenFOAM.run('redistributePar',np,'-overwrite')

    # Renumber mesh
    #print "Renumbering the mesh"
    #pyOpenFOAM.run('renumberMesh',np,'-overwrite')

    # Begin parallel run
    print "Running the problem"
    pyOpenFOAM.run('interFoam',np,hide=False)

    # Reconstruct the decomposed solution
    #for time_folder in pyOpenFOAM.get_sorted_time_folders():
    #    print "Reconstructing parallel mesh for time %s" % time_folder
    #    pyOpenFOAM.run('reconstructParMesh',args='-time '+time_folder)

    #    print "Reconstructing solution for time %s" % time_folder
    #    pyOpenFOAM.run('reconstructPar',args='-time '+time_folder)

else:
    print "Running the problem"
    pyOpenFOAM.run('interFoam',hide=False)




print "Finished!"


