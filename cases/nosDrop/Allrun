#!/usr/bin/python

import os
import sys
import math

toolPath = '../../../foamTools/python'
utilPath = '../../utilities/thermochem'

sys.path.append(toolPath)

import pyOpenFOAM
import meshBuilder


# Read number of processors from command line (1 by default)
(np,resume) = pyOpenFOAM.read_inputs(sys.argv)

if not resume:
    print "Running with %d processors" % np

    # Load a chemistry set to use from the utilities/chem folder
    pyOpenFOAM.load_chemistry('chemNOS.inp',utilPath)

    # Read species list from 'constant/reactions'
    species = pyOpenFOAM.read_species()

    # Add all gas species to "subSpecies" list in the "Vapor" phase
    pyOpenFOAM.add_species_to_thermo_dict(species)

    # Write the thermo file based on the species list
    pyOpenFOAM.write_thermo(species,utilPath)

    # Make the *.foam file for ParaView
    pyOpenFOAM.touch_foam_files('hypergol')

    # Make the 0 folder
    os.system('cp -r 0.org 0')
    
    # Build the mesh using meshBuilder
    wr = 1.
    wlr = 7.5
    hb = 8.
    ht = 12.
    t = 0.05
    
    b1 = meshBuilder.Block((-wr/2.-wlr,0,-t),(-wr/2,hb,t),(1,1,1))
    b2 = meshBuilder.Block((-wr/2.,0,-t),(wr/2.,hb,t),(1,1,1))
    b3 = meshBuilder.Block((wr/2.,0,-t),(wr/2.+wlr,hb,t),(1,1,1))
    b4 = meshBuilder.Block((-wr/2.-wlr,hb,-t),(-wr/2.,hb+wr,t),(1,1,1))
    b5 = meshBuilder.Block((wr/2.,hb,-t),(wr/2.+wlr,hb+wr,t),(1,1,1))
    b6 = meshBuilder.Block((-wr/2.-wlr,hb+wr,-t),(-wr/2.,hb+wr+ht,t),(1,1,1))
    b7 = meshBuilder.Block((-wr/2.,hb+wr,-t),(wr/2.,hb+wr+ht,t),(1,1,1))
    b8 = meshBuilder.Block((wr/2.,hb+wr,-t),(wr/2.+wlr,hb+wr+ht,t),(1,1,1))
    
    blocks = [b1,b2,b3,b4,b5,b6,b7,b8]
    
    mesh = meshBuilder.BlockMesh(blocks)
    mesh.tagFaces((0,0,0),(0,1,0),"inflow")
    mesh.tagFaces((0,hb+ht+wr,0),(0,1,0),"atmosphere")
    mesh.tagFaces((0,0,t),(0,0,1),"symmetry")
    mesh.tagFaces((0,0,-t),(0,0,1),"symmetry")
    
    # Make point pairs on a given cylinder have arcs
    #rt2 = math.sqrt(2.0)
    #mesh.makeArcs(base=(0,hb+wr/2.,0), radius=wr*rt2/2., direction=(0,0,1))

    #cells per mm
    mesh.scale = 10
    mesh.baseUnit = 0.001
    
    f = open('constant/polyMesh/blockMeshDict','w')
    f.write(str(mesh))
    f.close()

    # Generate the initial mesh
    print "Generating blockMesh"
    pyOpenFOAM.run('blockMesh')
    

    if np > 1:
        # For parallel runs, decompose the problem
        print "Decomposing problem"
        pyOpenFOAM.set_decompose_par(np,"simple",1) #aspect ratio = 1 H/W
        pyOpenFOAM.set_balance_par(np)
        pyOpenFOAM.run('decomposePar',args='-cellDist')

    n_adapts = pyOpenFOAM.max_refinement_levels()
        
    for i in range(0,n_adapts):
        print "Pre-Refinement loop", i
        pyOpenFOAM.run('VOFSetFields',np)
        pyOpenFOAM.run('initDynamicMesh',np)


    print "Setting final field values"
    pyOpenFOAM.run('VOFSetFields',np)


# Run the problem
print "Running the problem"
if np > 1:
    os.system('foamJob -parallel -screen reactingInterFoam')
else:
    os.system('reactingInterFoam')

print "Finished!"


